schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

# mutation root
type mutation_root {
  # delete data from the table: "notes"
  delete_notes(
    # filter the rows which have to be deleted
    where: notes_bool_exp!
  ): notes_mutation_response

  # delete data from the table: "users"
  delete_users(
    # filter the rows which have to be deleted
    where: users_bool_exp!
  ): users_mutation_response

  # insert data into the table: "notes"
  insert_notes(
    # the rows to be inserted
    objects: [notes_insert_input!]!

    # on conflict condition
    on_conflict: notes_on_conflict
  ): notes_mutation_response

  # insert data into the table: "users"
  insert_users(
    # the rows to be inserted
    objects: [users_insert_input!]!

    # on conflict condition
    on_conflict: users_on_conflict
  ): users_mutation_response

  # update data of the table: "notes"
  update_notes(
    # sets the columns of the filtered rows to the given values
    _set: notes_set_input

    # filter the rows which have to be updated
    where: notes_bool_exp!
  ): notes_mutation_response

  # update data of the table: "users"
  update_users(
    # sets the columns of the filtered rows to the given values
    _set: users_set_input

    # filter the rows which have to be updated
    where: users_bool_exp!
  ): users_mutation_response
}

# columns and relationships of "notes"
type notes {
  body: String!
  created_at: timestamptz!
  id: uuid!
  owner: uuid!
  title: String!
  updated_at: timestamptz!

  # An object relationship
  user: users!
}

# aggregated selection of "notes"
type notes_aggregate {
  aggregate: notes_aggregate_fields
  nodes: [notes!]!
}

# aggregate fields of "notes"
type notes_aggregate_fields {
  count(columns: [notes_select_column!], distinct: Boolean): Int
  max: notes_max_fields
  min: notes_min_fields
}

# order by aggregate values of table "notes"
input notes_aggregate_order_by {
  count: order_by
  max: notes_max_order_by
  min: notes_min_order_by
}

# input type for inserting array relation for remote table "notes"
input notes_arr_rel_insert_input {
  data: [notes_insert_input!]!
  on_conflict: notes_on_conflict
}

# Boolean expression to filter rows from the table "notes". All fields are combined with a logical 'AND'.
input notes_bool_exp {
  _and: [notes_bool_exp]
  _not: notes_bool_exp
  _or: [notes_bool_exp]
  body: String_comparison_exp
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  owner: uuid_comparison_exp
  title: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  user: users_bool_exp
}

# unique or primary key constraints on table "notes"
enum notes_constraint {
  # unique or primary key constraint
  notes_pkey
}

# input type for inserting data into table "notes"
input notes_insert_input {
  body: String
  created_at: timestamptz
  id: uuid
  owner: uuid
  title: String
  updated_at: timestamptz
  user: users_obj_rel_insert_input
}

# aggregate max on columns
type notes_max_fields {
  body: String
  created_at: timestamptz
  title: String
  updated_at: timestamptz
}

# order by max() on columns of table "notes"
input notes_max_order_by {
  body: order_by
  created_at: order_by
  title: order_by
  updated_at: order_by
}

# aggregate min on columns
type notes_min_fields {
  body: String
  created_at: timestamptz
  title: String
  updated_at: timestamptz
}

# order by min() on columns of table "notes"
input notes_min_order_by {
  body: order_by
  created_at: order_by
  title: order_by
  updated_at: order_by
}

# response of any mutation on the table "notes"
type notes_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [notes!]!
}

# input type for inserting object relation for remote table "notes"
input notes_obj_rel_insert_input {
  data: notes_insert_input!
  on_conflict: notes_on_conflict
}

# on conflict condition type for table "notes"
input notes_on_conflict {
  constraint: notes_constraint!
  update_columns: [notes_update_column!]!
  where: notes_bool_exp
}

# ordering options when selecting data from "notes"
input notes_order_by {
  body: order_by
  created_at: order_by
  id: order_by
  owner: order_by
  title: order_by
  updated_at: order_by
  user: users_order_by
}

# select columns of table "notes"
enum notes_select_column {
  # column name
  body

  # column name
  created_at

  # column name
  id

  # column name
  owner

  # column name
  title

  # column name
  updated_at
}

# input type for updating data in table "notes"
input notes_set_input {
  body: String
  created_at: timestamptz
  id: uuid
  owner: uuid
  title: String
  updated_at: timestamptz
}

# update columns of table "notes"
enum notes_update_column {
  # column name
  body

  # column name
  created_at

  # column name
  id

  # column name
  owner

  # column name
  title

  # column name
  updated_at
}

# column ordering options
enum order_by {
  # in the ascending order, nulls last
  asc

  # in the ascending order, nulls first
  asc_nulls_first

  # in the ascending order, nulls last
  asc_nulls_last

  # in the descending order, nulls first
  desc

  # in the descending order, nulls first
  desc_nulls_first

  # in the descending order, nulls last
  desc_nulls_last
}

# query root
type query_root {
  # fetch data from the table: "notes"
  notes(
    # distinct select on columns
    distinct_on: [notes_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [notes_order_by!]

    # filter the rows returned
    where: notes_bool_exp
  ): [notes!]!

  # fetch aggregated fields from the table: "notes"
  notes_aggregate(
    # distinct select on columns
    distinct_on: [notes_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [notes_order_by!]

    # filter the rows returned
    where: notes_bool_exp
  ): notes_aggregate!

  # fetch data from the table: "notes" using primary key columns
  notes_by_pk(id: uuid!): notes

  # fetch data from the table: "users"
  users(
    # distinct select on columns
    distinct_on: [users_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [users_order_by!]

    # filter the rows returned
    where: users_bool_exp
  ): [users!]!

  # fetch aggregated fields from the table: "users"
  users_aggregate(
    # distinct select on columns
    distinct_on: [users_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [users_order_by!]

    # filter the rows returned
    where: users_bool_exp
  ): users_aggregate!

  # fetch data from the table: "users" using primary key columns
  users_by_pk(id: uuid!): users
}

# expression to compare columns of type String. All fields are combined with logical 'AND'.
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

# subscription root
type subscription_root {
  # fetch data from the table: "notes"
  notes(
    # distinct select on columns
    distinct_on: [notes_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [notes_order_by!]

    # filter the rows returned
    where: notes_bool_exp
  ): [notes!]!

  # fetch aggregated fields from the table: "notes"
  notes_aggregate(
    # distinct select on columns
    distinct_on: [notes_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [notes_order_by!]

    # filter the rows returned
    where: notes_bool_exp
  ): notes_aggregate!

  # fetch data from the table: "notes" using primary key columns
  notes_by_pk(id: uuid!): notes

  # fetch data from the table: "users"
  users(
    # distinct select on columns
    distinct_on: [users_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [users_order_by!]

    # filter the rows returned
    where: users_bool_exp
  ): [users!]!

  # fetch aggregated fields from the table: "users"
  users_aggregate(
    # distinct select on columns
    distinct_on: [users_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [users_order_by!]

    # filter the rows returned
    where: users_bool_exp
  ): users_aggregate!

  # fetch data from the table: "users" using primary key columns
  users_by_pk(id: uuid!): users
}

scalar timestamptz

# expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

# columns and relationships of "users"
type users {
  created_at: timestamptz!
  email: String!
  id: uuid!
  name: String

  # An array relationship
  notes(
    # distinct select on columns
    distinct_on: [notes_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [notes_order_by!]

    # filter the rows returned
    where: notes_bool_exp
  ): [notes!]!

  # An aggregated array relationship
  notes_aggregate(
    # distinct select on columns
    distinct_on: [notes_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [notes_order_by!]

    # filter the rows returned
    where: notes_bool_exp
  ): notes_aggregate!
  updated_at: timestamptz!
}

# aggregated selection of "users"
type users_aggregate {
  aggregate: users_aggregate_fields
  nodes: [users!]!
}

# aggregate fields of "users"
type users_aggregate_fields {
  count(columns: [users_select_column!], distinct: Boolean): Int
  max: users_max_fields
  min: users_min_fields
}

# order by aggregate values of table "users"
input users_aggregate_order_by {
  count: order_by
  max: users_max_order_by
  min: users_min_order_by
}

# input type for inserting array relation for remote table "users"
input users_arr_rel_insert_input {
  data: [users_insert_input!]!
  on_conflict: users_on_conflict
}

# Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
input users_bool_exp {
  _and: [users_bool_exp]
  _not: users_bool_exp
  _or: [users_bool_exp]
  created_at: timestamptz_comparison_exp
  email: String_comparison_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  notes: notes_bool_exp
  updated_at: timestamptz_comparison_exp
}

# unique or primary key constraints on table "users"
enum users_constraint {
  # unique or primary key constraint
  users_email_key

  # unique or primary key constraint
  users_id_key

  # unique or primary key constraint
  users_pkey
}

# input type for inserting data into table "users"
input users_insert_input {
  created_at: timestamptz
  email: String
  id: uuid
  name: String
  notes: notes_arr_rel_insert_input
  updated_at: timestamptz
}

# aggregate max on columns
type users_max_fields {
  created_at: timestamptz
  email: String
  name: String
  updated_at: timestamptz
}

# order by max() on columns of table "users"
input users_max_order_by {
  created_at: order_by
  email: order_by
  name: order_by
  updated_at: order_by
}

# aggregate min on columns
type users_min_fields {
  created_at: timestamptz
  email: String
  name: String
  updated_at: timestamptz
}

# order by min() on columns of table "users"
input users_min_order_by {
  created_at: order_by
  email: order_by
  name: order_by
  updated_at: order_by
}

# response of any mutation on the table "users"
type users_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [users!]!
}

# input type for inserting object relation for remote table "users"
input users_obj_rel_insert_input {
  data: users_insert_input!
  on_conflict: users_on_conflict
}

# on conflict condition type for table "users"
input users_on_conflict {
  constraint: users_constraint!
  update_columns: [users_update_column!]!
  where: users_bool_exp
}

# ordering options when selecting data from "users"
input users_order_by {
  created_at: order_by
  email: order_by
  id: order_by
  name: order_by
  notes_aggregate: notes_aggregate_order_by
  updated_at: order_by
}

# select columns of table "users"
enum users_select_column {
  # column name
  created_at

  # column name
  email

  # column name
  id

  # column name
  name

  # column name
  updated_at
}

# input type for updating data in table "users"
input users_set_input {
  created_at: timestamptz
  email: String
  id: uuid
  name: String
  updated_at: timestamptz
}

# update columns of table "users"
enum users_update_column {
  # column name
  created_at

  # column name
  email

  # column name
  id

  # column name
  name

  # column name
  updated_at
}

scalar uuid

# expression to compare columns of type uuid. All fields are combined with logical 'AND'.
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

